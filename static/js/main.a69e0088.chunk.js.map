{"version":3,"sources":["types/index.ts","pages/Form.tsx","pages/Main.tsx","App.tsx","index.tsx"],"names":["List","Form","useState","input","textarea","checkbox","form","setForm","dataOutput","setDataOutput","showOutput","setShowOutput","handleChangeInput","type","value","Input","Textarea","Checkbox","className","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","TextField","label","onChange","e","target","Button","variant","color","onClick","Number","isInteger","toast","error","progress","undefined","Array","fill","map","_","idx","placeholder","Date","now","htmlFor","id","Main","to","App","component","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a69e0088.chunk.js","sourcesContent":["export interface IForm {\r\n    input: number | null,\r\n    textarea: number | null,\r\n    checkbox: number | null\r\n}\r\n\r\nexport enum List {\r\n    Input,\r\n    Textarea,\r\n    Checkbox\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { IForm, List } from \"../types/index\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport '../styles/Form.scss';\r\n\r\nconst Form: React.FC = () => {\r\n    const [form, setForm] = useState<IForm>({\r\n        input: null,\r\n        textarea: null,\r\n        checkbox: null\r\n    })\r\n    const [dataOutput, setDataOutput] = useState<IForm>({\r\n        input: null,\r\n        textarea: null,\r\n        checkbox: null\r\n    })\r\n    const [showOutput, setShowOutput] = useState<boolean>(false);\r\n\r\n    const handleChangeInput = (type: List, value: string): void => {\r\n        if (type === List.Input) {\r\n            setForm({ ...form, input: +value });\r\n        }\r\n        if (type === List.Textarea) {\r\n            setForm({ ...form, textarea: +value });\r\n        }\r\n        if (type === List.Checkbox) {\r\n            setForm({ ...form, checkbox: +value });\r\n        }\r\n    }\r\n\r\n    const handleClickButton = (): void => {\r\n        const isWrongData: boolean = !Number.isInteger(form.input)\r\n            || !Number.isInteger(form.textarea)\r\n            || !Number.isInteger(form.checkbox)\r\n            || !form.input\r\n            || !form.textarea\r\n            || !form.checkbox\r\n        if (isWrongData) {\r\n            toast.error('Invalid input! Try again!', {\r\n                position: \"top-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        } else {\r\n            setDataOutput(form);\r\n            setShowOutput(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={3000}\r\n                hideProgressBar\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n\r\n            <form className=\"form\">\r\n                <span className=\"form__title\">Count blocks</span>\r\n                <TextField\r\n                    type=\"number\"\r\n                    label=\"Input\"\r\n                    className=\"form__input\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeInput(List.Input, e.target.value)} />\r\n                <TextField\r\n                    type=\"number\"\r\n                    label=\"Textarea\"\r\n                    className=\"form__input\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeInput(List.Textarea, e.target.value)} />\r\n                <TextField\r\n                    type=\"number\"\r\n                    label=\"Checkbox\"\r\n                    className=\"form__input\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeInput(List.Checkbox, e.target.value)} />\r\n                <Button variant=\"contained\" color=\"primary\" className=\"form__input\" onClick={handleClickButton} >\r\n                    build\r\n                </Button>\r\n            </form>\r\n            {\r\n                showOutput && (\r\n                    <form className=\"form\">\r\n                        <span className=\"form__title\">Output</span>\r\n                        {\r\n                            new Array(Number(dataOutput.input)).fill(0).map((_, idx) => (\r\n                                <input key={idx * Date.now()} placeholder={`Input ${idx + 1}`} className=\"form__out\" />\r\n                            ))\r\n                        }\r\n                        {\r\n                            new Array(Number(dataOutput.textarea)).fill(0).map((_, idx) => (\r\n                                <textarea key={idx * Date.now()} placeholder={`Textarea ${idx + 1}`} className=\"form__out\" />\r\n                            ))\r\n                        }\r\n                        {\r\n                            new Array(Number(dataOutput.checkbox)).fill(0).map((_, idx) => (\r\n                                <label key={idx * Date.now()} htmlFor={`check-${idx}`} className=\"form__out\">Checkbox {idx + 1}\r\n                                    <input id={`check-${idx}`} type=\"checkbox\" className=\"form__out\" />\r\n                                </label>\r\n                            ))\r\n                        }\r\n                    </form>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { NavLink } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Main: React.FC = () => {\r\n    return (\r\n        <NavLink to='/form'>\r\n            <Button variant=\"contained\" color=\"primary\">\r\n                form\r\n            </Button>\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport Form from './pages/Form';\nimport Main from './pages/Main';\n\nimport './styles/App.scss';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"container\">\n      <BrowserRouter>\n        <Switch>\n          <Route component={Main} path='/' exact />\n          <Route component={Form} path='/form' />\n          <Redirect to='/' />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}